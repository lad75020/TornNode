{
  "generatedAt": "2025-09-26T00:00:00Z",
  "note": "List of MCP tools available in this VS Code session (tools with 'mcp_' prefix).",
  "tools": [
    {
      "server": "imagesorcery",
      "name": "mcp_imagesorcery_blur",
      "description": "Blur entire image or everything except specified areas.",
      "params": {"input_path": "string", "invert_areas": "boolean?", "output_path": "string|null"}
    },
    {
      "server": "imagesorcery",
      "name": "mcp_imagesorcery_change_color",
      "description": "Apply grayscale or sepia palette.",
      "params": {"input_path": "string", "palette": "grayscale|sepia", "output_path": "string|null"}
    },
    {"server": "imagesorcery", "name": "mcp_imagesorcery_config", "description": "Get/set/reset runtime config for image tools.", "params": {"action": "get|set|reset", "key": "string?", "value": "any?", "persist": "boolean?"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_crop", "description": "Crop image via bounding box.", "params": {"input_path": "string", "x1": "int", "y1": "int", "x2": "int", "y2": "int", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_detect", "description": "Object detection with optional masks/polygons.", "params": {"input_path": "string", "model_name": "string?", "confidence": "0..1?", "return_geometry": "boolean?", "geometry_format": "mask|polygon"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_draw_arrows", "description": "Draw arrows.", "params": {"input_path": "string", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_draw_circles", "description": "Draw circles.", "params": {"input_path": "string", "circles": "Array<{center_x,center_y,radius,color?,thickness?,filled?}>", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_draw_lines", "description": "Draw lines.", "params": {"input_path": "string", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_draw_rectangles", "description": "Draw rectangles.", "params": {"input_path": "string", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_draw_texts", "description": "Draw texts with various fonts.", "params": {"input_path": "string", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_fill", "description": "Fill areas with color/opacity or make transparent.", "params": {"input_path": "string", "invert_areas": "boolean?", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_find", "description": "Open-vocabulary detection via text prompt.", "params": {"input_path": "string", "description": "string", "model_name": "string?", "confidence": "0..1?", "return_all_matches": "boolean?", "return_geometry": "boolean?", "geometry_format": "mask|polygon"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_get_metainfo", "description": "Return image metadata.", "params": {"input_path": "string"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_overlay", "description": "Overlay an image onto another.", "params": {"base_image_path": "string", "overlay_image_path": "string", "x": "int", "y": "int", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_resize", "description": "Resize image by width/height or scale factor.", "params": {"input_path": "string", "width": "int?", "height": "int?", "scale_factor": "number?", "interpolation": "nearest|linear|area|cubic|lanczos?", "output_path": "string|null"}},
    {"server": "imagesorcery", "name": "mcp_imagesorcery_rotate", "description": "Rotate image, keeping full bounds.", "params": {"input_path": "string", "angle": "number", "output_path": "string|null"}},

    {"server": "mongodb", "name": "mcp_mongodb_connect", "description": "Connect to a MongoDB instance.", "params": {"connectionString": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_list-databases", "description": "List databases.", "params": {}},
    {"server": "mongodb", "name": "mcp_mongodb_list-collections", "description": "List collections in a DB.", "params": {"database": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_find", "description": "Run a find query.", "params": {"database": "string", "collection": "string", "filter": "object?", "limit": "int?", "projection": "object?", "sort": "object?"}},
    {"server": "mongodb", "name": "mcp_mongodb_aggregate", "description": "Run an aggregation pipeline.", "params": {"database": "string", "collection": "string", "pipeline": "array"}},
    {"server": "mongodb", "name": "mcp_mongodb_count", "description": "Count documents.", "params": {"database": "string", "collection": "string", "query": "object?"}},
    {"server": "mongodb", "name": "mcp_mongodb_export", "description": "Export find/aggregate results as EJSON.", "params": {"database": "string", "collection": "string", "exportTarget": "array", "exportTitle": "string", "jsonExportFormat": "relaxed|canonical"}},
    {"server": "mongodb", "name": "mcp_mongodb_explain", "description": "Explain query/aggregate plans.", "params": {"database": "string", "collection": "string", "method": "array"}},
    {"server": "mongodb", "name": "mcp_mongodb_create-collection", "description": "Create collection.", "params": {"database": "string", "collection": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_drop-collection", "description": "Drop collection.", "params": {"database": "string", "collection": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_drop-database", "description": "Drop database.", "params": {"database": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_insert-many", "description": "Insert many documents.", "params": {"database": "string", "collection": "string", "documents": "array"}},
    {"server": "mongodb", "name": "mcp_mongodb_update-many", "description": "Update many documents.", "params": {"database": "string", "collection": "string", "filter": "object?", "update": "object", "upsert": "boolean?"}},
    {"server": "mongodb", "name": "mcp_mongodb_delete-many", "description": "Delete many documents.", "params": {"database": "string", "collection": "string", "filter": "object?"}},
    {"server": "mongodb", "name": "mcp_mongodb_collection-indexes", "description": "Describe collection indexes.", "params": {"database": "string", "collection": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_collection-schema", "description": "Describe collection schema.", "params": {"database": "string", "collection": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_collection-storage-size", "description": "Collection size.", "params": {"database": "string", "collection": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_db-stats", "description": "Database stats.", "params": {"database": "string"}},
    {"server": "mongodb", "name": "mcp_mongodb_mongodb-logs", "description": "Recent mongod logs.", "params": {"limit": "int?", "type": "global|startupWarnings"}},
    {"server": "mongodb", "name": "mcp_mongodb_rename-collection", "description": "Rename collection.", "params": {"database": "string", "collection": "string", "newName": "string", "dropTarget": "boolean?"}},

    {"server": "mongodb (alt)", "name": "mcp_mongodb_mcp_s_*", "description": "Same MongoDB operations via alternate MCP server prefix (aggregate/find/update/â€¦)", "params": {}},

    {"server": "package-search", "name": "mcp_package-searc_package_search_grep", "description": "Regex grep in public package source.", "params": {"registry_name": "crates_io|golang_proxy|npm|py_pi", "package_name": "string", "pattern": "regex", "version": "string?", "languages": "string[]?"}},
    {"server": "package-search", "name": "mcp_package-searc_package_search_hybrid", "description": "Semantic + regex hybrid search.", "params": {"registry_name": "crates_io|golang_proxy|npm|py_pi", "package_name": "string", "semantic_queries": "string[]", "pattern": "regex?", "version": "string?", "languages": "string[]?"}},
    {"server": "package-search", "name": "mcp_package-searc_package_search_read_file", "description": "Read specific lines from a package file by sha.", "params": {"registry_name": "crates_io|golang_proxy|npm|py_pi", "package_name": "string", "filename_sha256": "string", "start_line": "int", "end_line": "int", "version": "string?"}},

    {"server": "playwright-browser", "name": "mcp_playwright_browser_click", "description": "Click element on page.", "params": {"element": "string", "ref": "string", "button": "left|right|middle", "doubleClick": "boolean?", "modifiers": "['Alt'|'Control'|'Meta'|'Shift']?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_close", "description": "Close page.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_console_messages", "description": "Get console messages.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_drag", "description": "Drag-and-drop from source to target.", "params": {"startElement": "string", "startRef": "string", "endElement": "string", "endRef": "string"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_evaluate", "description": "Evaluate JavaScript.", "params": {"function": "string", "element": "string?", "ref": "string?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_file_upload", "description": "Upload files.", "params": {"paths": "string[]"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_fill_form", "description": "Fill form fields.", "params": {"fields": "Array<{name,ref,type,value}>"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_handle_dialog", "description": "Handle dialogs.", "params": {"accept": "boolean", "promptText": "string?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_hover", "description": "Hover element.", "params": {"element": "string", "ref": "string"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_install", "description": "Install browser.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_navigate", "description": "Navigate to URL.", "params": {"url": "string"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_navigate_back", "description": "Go back.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_network_requests", "description": "List network requests.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_press_key", "description": "Press keyboard key.", "params": {"key": "string"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_resize", "description": "Resize viewport.", "params": {"width": "int", "height": "int"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_select_option", "description": "Select dropdown options.", "params": {"element": "string", "ref": "string", "values": "string[]"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_snapshot", "description": "Accessibility snapshot.", "params": {}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_tabs", "description": "Manage tabs.", "params": {"action": "list|new|close|select", "index": "int?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_take_screenshot", "description": "Screenshot page or element.", "params": {"filename": "string?", "type": "png|jpeg", "fullPage": "boolean?", "element": "string?", "ref": "string?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_type", "description": "Type text into element.", "params": {"element": "string", "ref": "string", "text": "string", "slowly": "boolean?", "submit": "boolean?"}},
    {"server": "playwright-browser", "name": "mcp_playwright_browser_wait_for", "description": "Wait for text/time.", "params": {"text": "string?", "textGone": "string?", "time": "number?"}},

    {"server": "sequentialthinking", "name": "mcp_sequentialthi_sequentialthinking", "description": "Reflective problem-solving steps (chain of thought tool).", "params": {"thought": "string", "nextThoughtNeeded": "boolean", "thoughtNumber": "int", "totalThoughts": "int", "isRevision": "boolean?", "revisesThought": "int?", "branchFromThought": "int?", "branchId": "string?", "needsMoreThoughts": "boolean?"}}
  ]
}
