#!/usr/bin/env node
/**
 * memoryReport.js
 * Génère un rapport HTML consolidé à partir de:
 *  - memory-graphs.json (graphe brut)
 *  - memory-diff.json (diff & ranking)
 *  - memory-quality.json (métriques de qualité & staleness)
 * Optionnellement memory-relations.json si présent.
 * Sortie: memory-report.html
 */
const fs = require('fs');
const path = require('path');

const ROOT = path.join(__dirname,'..');
const files = {
  graph: path.join(ROOT,'memory-graphs.json'),
  diff: path.join(ROOT,'memory-diff.json'),
  quality: path.join(ROOT,'memory-quality.json'),
  relations: path.join(ROOT,'memory-relations.json')
};
function load(f){ try { return JSON.parse(fs.readFileSync(f,'utf8')); } catch { return null; } }

const graph = load(files.graph) || {};
const diff = load(files.diff) || {};
const quality = load(files.quality) || {};
const rel = load(files.relations) || {};

const entities = graph.entities || graph || [];
const relations = graph.relations || rel.relations || [];

function h(str){ return String(str).replace(/[&<>]/g,c=>({"&":"&amp;","<":"&lt;",">":"&gt;"}[c])); }

function table(rows, headers){
  return `<table><thead><tr>${headers.map(hd=>`<th>${h(hd)}</th>`).join('')}</tr></thead><tbody>${rows.map(r=>`<tr>${r.map(c=>`<td>${h(c)}</td>`).join('')}</tr>`).join('')}</tbody></table>`;
}

// Top ranking (diff)
const ranked = diff.rankedTop || [];
const rankedTable = table(ranked.map(r=>[
  r.id,
  r.entityType,
  r.degree ?? (r.in+r.out),
  r.centrality ?? '',
  r.obs,
  r.orphan?'yes':'',
  r.staleDays ?? '',
  r.score
]), ['ID','Type','Degree','Centrality','Obs','Orphan','Stale(d)','Score']);

// Centralité
const topCentral = (quality.topCentral||[]).map(c=>[c.id,c.entityType,c.degree]);
const centralTable = table(topCentral, ['ID','Type','Degree']);

// Orphelins
const orphans = (quality.topOrphans||[]).map(o=>[o.id,o.entityType]);
const orphanTable = table(orphans, ['ID','Type']);

// Staleness
const topStale = (((quality||{}).staleness)||{}).topStale||[];
const staleTable = table(topStale.map(s=>[s.id,s.entityType,s.staleDays]), ['ID','Type','Stale(days)']);

// Stats globales
const statsList = [
  ['Entities (server)', quality.counts?.serverEntities],
  ['Relations', quality.counts?.serverRelations],
  ['Coverage %', quality.coverage?.coveragePct],
  ['Orphan rate', quality.orphanRate],
  ['Relation density', quality.relationDensity],
  ['Avg observations', quality.avgObs],
  ['Hash drift count', quality.hashDriftCount],
  ['Staleness avg days', quality.staleness?.avgDays],
  ['Staleness median days', quality.staleness?.medianDays]
].filter(r=>r[1]!==undefined && r[1]!==null);
const statsTable = table(statsList, ['Métrique','Valeur']);

// Suggestions
const suggestions = (quality.suggestions||[]).concat(diff.suggestions||[]);
const suggestionsHtml = suggestions.length? `<ul>${suggestions.map(s=>`<li>${h(s)}</li>`).join('')}</ul>` : '<p>Aucune suggestion.</p>';

// Relations résumé
const relSample = relations.slice(0,50).map(r=>[r.from,r.relationType,r.to]);
const relTable = table(relSample, ['From','Type','To']);

const html = `<!DOCTYPE html><html lang="fr"><head><meta charset="utf-8"/><title>Memory Report</title>
<style>
body{font-family:system-ui,Arial,sans-serif;margin:20px;line-height:1.4;}
h1,h2{margin-top:1.2em;}
table{border-collapse:collapse;margin:1em 0;font-size:14px;}
th,td{border:1px solid #ccc;padding:4px 8px;vertical-align:top;}
th{background:#f5f5f5;}
code{background:#f0f0f0;padding:2px 4px;border-radius:3px;}
.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(320px,1fr));gap:24px;}
section{background:#fff;border:1px solid #e2e2e2;border-radius:6px;padding:12px;box-shadow:0 1px 2px rgba(0,0,0,0.04);} 
footer{margin-top:40px;font-size:12px;color:#666;}
</style></head><body>
<h1>Rapport Mémoire Projet</h1>
<p>Généré: ${h(new Date().toISOString())}</p>
<h2>Résumé Statistiques</h2>
${statsTable}
<h2>Top Ranking (Priorité)</h2>
${rankedTable}
<div class="grid">
  <section><h3>Centralité (Top)</h3>${centralTable}</section>
  <section><h3>Orphelins (Top)</h3>${orphanTable}</section>
  <section><h3>Staleness (Top)</h3>${staleTable}</section>
</div>
<h2>Suggestions</h2>
${suggestionsHtml}
<h2>Échantillon Relations (50 premières)</h2>
${relTable}
<h2>Méta</h2>
<p>Fichiers sources analysés: ${entities.length}. Relations totales: ${relations.length}.</p>
<footer>Generated by memoryReport.js – adapter si besoin (ajout graph viz, filtres, etc.).</footer>
</body></html>`;

const outFile = path.join(ROOT,'memory-report.html');
fs.writeFileSync(outFile, html);
console.log('[memory:report] écrit', outFile);